Java Day 5

Section 3:
----------
IF-ELSE
=======
Ex. Read marks from the user, compute percentage and assign grade based on following rules:

percent > 80 : A
percent > 70 : B
percent > 60 : C
		   : D

2 ways of writing if-else: 
1. Use return statement (if-return)
2. Use else statement (if-else)

Solution:

import java.util.Scanner; 
public class App {
	public static void main(String[] args) {
	/*
	 * Reading Input(marks) from the User using scanner.
	 */
	 System.out.println("Enter the marks");
	 Scanner sc = new Scanner(System.in);
	 double marks = sc.nextDouble();
	 double total = 400; 
	 /* 
	  * compute Percentage
	  */
	 Utility utility = new Utility();
	 double percent = utility.computePercent(marks,total);
	 System.out.println("You have scored: " + percent + "%");
	 
	 String grade = utility.computeGrade(percent);
	 System.out.println("Your grade is: " + grade);
	 
	 grade = utility.computeGradeWithElse(percent);
	 System.out.println("Your grade is: " + grade);
 } 
}
 
class Utility{
	
	double computePercent(double marks,double total){
		double percent = (marks*100) / total;
		return percent; 
	}
	
	String computeGrade(double percent){
		
		if(percent > 80) 
			return "A";
		 
		if(percent > 70)
			return "B";
		
		if(percent>60)
			return "C";
		
		return "D"; 
	}
	
	String computeGradeWithElse(double percent){
		String grade ="";
		if(percent > 80)  
			grade="A";
		else
	    if(percent > 70) 
			grade="B";
	    else
		if(percent > 60)  
			grade="C";
		else
			grade="D";
		
		return grade;
	}
}

for-loop
========
i. traditional for 
ii. for-each loop


i. traditional for loop

for(statement-1 ;condition ;statement-2 )

statement-1 will be executed only once for very first time. 
condition will be checked after body execution
statement-2 will be executed after the body. 


public class App {
	public static void main(String[] args) {
		int[] arry = {4,2,6,7,2,1,0};
		/*
		 * Traditional For loop
		 */
		 
		for(int i=0;i<5;i=i+1) { //i=0 (i<5)?T, i=1(1<5)?T, i=2(2<5)?T, i=3(3<5)?T,i=4(4<5)?T,i=5(5<5)?F
			System.out.print(i + " "); //0 1 2 3 4 
		}
		
		System.out.println("\n**********************");
		
		int i=0;
		for( ;i<5 ; ) {
			System.out.print(i + " "); //0 1 2 3 4 
			i++; // i=i+1
		}
		
		System.out.println("\n**********************");
		
		for(i=0;i<7 ;i++ ) { //i=0.....7  i=7?F
			System.out.print(arry[i] + " ");
		}
		
		System.out.println("\n**********************");
		
		for( int temp: arry ) { //temp =4 , 2, 6,7,2,1,0
			System.out.print(temp + " "); //4 2 
		}
 } 

ii. for-each loop 

for( int temp: arry ) { //temp =4 , 2, 6,7,2,1,0
			System.out.print(temp + " "); //4 2 
}


while loop
----------
public class App {
	public static void main(String[] args) {
		int[] arry = {4,2,6,7,2,1,0};
		 
		int i=0; 
		while(i<5) { //i=0 ,1 ,2, 3, 4 , 5
			System.out.print(i + " "); //0 1 2 3 4
			i++;
		}
		
		System.out.println("\n*************");
		i=0;
		while(i<7) {//i=0...6
			System.out.print(arry[i] + " ");
			i++;
		}
 } 
}
  
Switch-Case
===========
public class App {
	public static void main(String[] args) {
		 int x=4; 
		 
		 switch(x) {  
		 case 1: 
			 System.out.println("case 1");
			 break;
		 case 2: 
			 System.out.println("case 2");
			 break;
		 case 3: 
			 System.out.println("case 3");
			 break;
		 default:
			 System.out.println("case default");
			 break;
	     }
 } 
}

Case Study: 
Menu Driven Program
--------------------

import java.util.Scanner; 
 public class App {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter no 1");
		int x = sc.nextInt();
		System.out.println("Enter no 2");
		int y = sc.nextInt();
		
		while(true) {
			System.out.println("-------MENU----------");
			System.out.println("Press 1. for addition");
			System.out.println("Press 2. for subtraction");
			System.out.println("Press 3. for multiply");
			System.out.println("Press 4. for divide");
			System.out.println("Press 0. to Exit");
			System.out.println("Please select an Option");
			
			int option = sc.nextInt();
			
			if(option == 0 ) {
				System.out.println("Thank you. bye. visit again");
				break; 
			}
	
			switch(option) {
			case 1:
				System.out.println("Addition is: " + (x+y));
				break;
			case 2:
				System.out.println("Subtraction is: " + (x-y));
				break;
			case 3: 
				System.out.println("Multiplication is: " + (x*y));
				break;
			case 4: 
				System.out.println("Division is: " + (x/y));
				break;
			default: 
				System.out.println("Invalid option entered..try again");
			} //switch ends
		}//while ends
	} 
}

Primitive Variables and Casting
===============================

Data type		Container size		Default value	
---------		--------------		-------------
byte				8 bits 				0
short				16 bits 			0
char				16 bits 			\u 0
int 				32 bits 			0
float 				32 bits 			0.0
long				64 bits				0
double				64 bits 			0.0
boolean				1 bit				false

Rule 1: container size: large container cannot fit into smaller container 

Rule 2: Loss of Precision results in ERROR. 

NOTE:

3.4 / 3.4D / 3.4d == double
3.4F / 3.4f == float 

45 == int
45L / 45l == long

Example:
	int i=5; 
		 	double d = 4.5; 
		 	
		 	//i=d;  // int(32) <= double(64) : ERROR |  i <= 4.5 (4): ERROR
		 	
		 	d=i; // double(64) <== int(32) : FINE | 5.0  <== 5 : FINE
		 	
		 	int x = 5.8; // int <== double : ERROR
		 	
		 	int y=5F; //int(32) <== float(32) : FINE  | 5 <==  5.0: ERROR
		 	
		 	float f = 5; // float(32)<==int(32) : FINE | 5.0 <== 5 : FINE
		 	
		 	double d1 = 4.5F; //double(64)  <==  float(32) : FINE | 4.5<==4.5: FINE
		 	
		 	System.out.println("============================================");
		 	
		 	int z = (int)5.5F; //z=5
		 	
		 	int z1 = (int)4.5;  
		 	
		 	float f1 = (double) 4.5; //ERROR: 64 bit cannot go in 32 bit 
		 	
		 	int balance = (int) Math.round(45677.90);




6 PM - 7.30 PM 
TEST? 


GIT + AGILE + SQL 



















