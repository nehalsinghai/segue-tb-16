SQL Day 2
---------
SQL Structure 

select <attributes> / <gouping-functions> (compulsary)
from <tbl-name(s)>  (compulsary)
where <condition(s)> (optional)
group by <attribute> (optional)
having <condition(s)>: group functions (optional)
order by <attribute> ASC/DESC/ (optional)
limit l /s,l  (optional)


Group by
======== 
Grouping Functions / Aggregate functions 

COUNT
MIN
MAX
SUM
AVG

Note: MIN, MAX, SUM, AVG are arithmetic functions which work only on numeric attributes. 

mysql> select SUM(esalary) from employee;
+--------------+
| SUM(esalary) |
+--------------+
|       414000 |
+--------------+
1 row in set (0.00 sec)

mysql> select AVG(esalary) from employee;
+--------------+
| AVG(esalary) |
+--------------+
|        82800 |
+--------------+
1 row in set (0.00 sec)

mysql> select MAX(esalary) from employee;
+--------------+
| MAX(esalary) |
+--------------+
|        90000 |
+--------------+
1 row in set (0.00 sec)

mysql> select MIN(esalary) from employee;
+--------------+
| MIN(esalary) |
+--------------+
|        75000 |
+--------------+
1 row in set (0.00 sec)

mysql> select COUNT(*) from employee;
+----------+
| COUNT(*) |
+----------+
|        5 |
+----------+
1 row in set (0.00 sec)

mysql> select COUNT(eno) from employee;
+------------+
| COUNT(eno) |
+------------+
|          5 |
+------------+
1 row in set (0.00 sec)

UC: Compute number of Employees in each city. 

(group) ecity=london
|   1 | harry potter     |   85000 | london     |
|   3 | hermione granger |   90000 | london     |

(group) ecity=manchester
|   2 | ronald weasley   |   75000 | manchester |

(group) ecity=shire
|   5 | frodo baggins    |   87000 | shire      |
|   6 | samwise gamejee  |   77000 | shire      |


mysql> select ecity as CITY,count(eno) as NUMBER_OF_EMPLOYEE
    -> from employee
    -> group by ecity;
+------------+--------------------+
| CITY       | NUMBER_OF_EMPLOYEE |
+------------+--------------------+
| london     |                  2 |
| manchester |                  1 |
| shire      |                  2 |
+------------+--------------------+

UC: Compute employees living in each city. The result set must have only those cities that has more than 1 employee. 

select 
from
where 
group by 

mysql> select ecity,count(eno)
    -> from employee
    -> where count(eno) > 1
    -> group by ecity;

ERROR 1111 : invalid use of grouping function 

[Having]
1. having can be written after group-by 
2. having can aloow programmer to call group function

mysql> select ecity,count(eno)
    -> from employee
    -> group by ecity
    -> having count(eno) > 1;
+--------+------------+
| ecity  | count(eno) |
+--------+------------+
| london |          2 |
| shire  |          2 |
+--------+------------+

mysql> select ecity,count(eno) as num_of_emp
    -> from employee
    -> group by ecity
    -> having num_of_emp > 1;
+--------+------------+
| ecity  | num_of_emp |
+--------+------------+
| london |          2 |
| shire  |          2 |
+--------+------------+

UC: count employees in each city except 'manchester'. 

|   1 | harry potter     |   85000 | london     |
|   2 | ronald weasley   |   75000 | manchester |
|   3 | hermione granger |   90000 | london     |
|   5 | frodo baggins    |   87000 | shire      |
|   6 | samwise gamejee  |   77000 | shire      |

ecity <> 'manchester'

|   1 | harry potter     |   85000 | london     |
|   3 | hermione granger |   90000 | london     |
|   5 | frodo baggins    |   87000 | shire      |
|   6 | samwise gamejee  |   77000 | shire      |

group by ecity
ecity: london
|   1 | harry potter     |   85000 | london     |
|   3 | hermione granger |   90000 | london     |

ecity:shire
|   5 | frodo baggins    |   87000 | shire      |
|   6 | samwise gamejee  |   77000 | shire      |


mysql> select ecity, count(eno)
    -> from employee
    -> where ecity <> 'manchester'
    -> group by ecity;
+--------+------------+
| ecity  | count(eno) |
+--------+------------+
| london |          2 |
| shire  |          2 |
+--------+------------+

UC: count number of employees in each city except 'shire' and having more then 1 employee living in it. 

select ecity, count(eno)
    -> from employee
    -> where ecity <> 'shire'
    -> group by ecity
    -> having count(eno)>1;
+--------+------------+
| ecity  | count(eno) |
+--------+------------+
| london |          2 |
+--------+------------+

UC: count number of employees in each city. city with maximum employee should be first. 

A 5
B 7
C 3

B 7
A 5
C 3  : Decending order (3,2,1)

mysql> select ecity, count(eno) as cnt
    -> from employee
    -> group by ecity
    -> order by cnt DESC;
+------------+-----+
| ecity      | cnt |
+------------+-----+
| london     |   2 |
| shire      |   2 |
| manchester |   1 |
+------------+-----+

 
UC: count number of employees in each city. city with least number of employees should be first. 

A 5
B 7
C 3

C 3
A 5
B 7  : Ascending order (1,2,3..)

mysql> select ecity, count(eno) as cnt
    -> from employee
    -> group by ecity
    -> order by cnt;  <-- by default, its ASC
+------------+-----+
| ecity      | cnt |
+------------+-----+
| manchester |   1 |
| london     |   2 |
| shire      |   2 |
+------------+-----+

 -> order by cnt ASC;   is also fine. 

Structure:
select
from 
where
group by
having
order by 

[limit clause]
UC: count number of employees in each city. city with least number of employees should be first. There should only be 2 records in the result set 

mysql> select ecity, count(eno) as cnt
    -> from employee
    -> group by ecity
    -> order by cnt ASC
    -> limit 2;
+------------+-----+
| ecity      | cnt |
+------------+-----+
| manchester |   1 |
| london     |   2 |
+------------+-----+
2 rows in set (0.00 sec)

mysql> select ecity, count(eno) as cnt
    -> from employee
    -> group by ecity
    -> order by cnt ASC
    -> limit 1,2;
+--------+-----+
| ecity  | cnt |
+--------+-----+
| london |   2 |
| shire  |   2 |
+--------+-----+
2 rows in set (0.00 sec)

Working with Multiple Tables
=============================

product(pid, pname, pprice,vid)
vendor(vid, vname, vcity)

mysql> create table product(pid int primary key auto_increment,pname varchar(255),pprice double,vid int);

mysql> create table vendor(vid int primary key auto_increment,vname varchar(100),vcity varchar(100));


mysql> insert into vendor(vname,vcity) values ('ABC Electronics', 'mumbai');
Query OK, 1 row affected (0.01 sec)

mysql> insert into vendor(vname,vcity) values ('XYZ Electronics', 'indore');

mysql> insert into product(pname,pprice,vid) values('Oppo A12',13000, 1);
Query OK, 1 row affected (0.01 sec)

mysql> insert into product(pname,pprice,vid) values('Oppo A15',18000, 2);
Query OK, 1 row affected (0.01 sec)

mysql> insert into product(pname,pprice,vid) values('Apple SE',17000, 1);
Query OK, 1 row affected (0.21 sec)

mysql> insert into product(pname,pprice,vid) values('Apple iphone 6',23000, 2);
Query OK, 1 row affected (0.32 sec)

mysql> insert into product(pname,pprice,vid) values('Apple iphone 8',36000, 1);
Query OK, 1 row affected (0.01 sec)

[Manual Mapping]
UC: Display all products sold by vendor 'ABC Electronics'. 
mysql> select pname,pprice
    -> from product,vendor
    -> where product.vid = vendor.vid AND vname='ABC Electronics';
+----------------+--------+
| pname          | pprice |
+----------------+--------+
| Oppo A12       |  13000 |
| Apple SE       |  17000 |
| Apple iphone 8 |  36000 |
+----------------+--------+
3 rows in set (0.01 sec)

UC: compute total price of all products sold by vendor ABC Electronics. 

mysql> select SUM(pprice) as Total_Price
    -> from product,vendor
    -> where product.vid = vendor.vid AND
    -> vname='ABC Electronics';
+-------------+
| Total_Price |
+-------------+
|       66000 |
+-------------+

UC: compute total price of all products for each vendor. 

mysql> select vname, SUM(pprice) as Total_Price
    -> from product,vendor
    -> where product.vid = vendor.vid
    -> group by vname;
+-----------------+-------------+
| vname           | Total_Price |
+-----------------+-------------+
| ABC Electronics |       66000 |
| XYZ Electronics |       41000 |
+-----------------+-------------+

UC: Count number of products for each vendor city. Only display those cities that have atleast 2 or more products. 


select vname,count(pid)
    -> from product,vendor
    -> where product.vid= vendor.vid
    -> group by vcity
    -> having count(pid)>=2;
+----------------+------------+
| vname          | count(pid) |
+----------------+------------+
| XYZ Electronic |          2 |
| ABC Electronic |          3 |
+----------------+------------+





















